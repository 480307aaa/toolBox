package com.yonyou.ws.common.utils;

import java.math.BigDecimal;

/**
 * 由于Java的简单类型不能够精确的对浮点数进行运算，这个工具类提供精
 * 确的浮点数运算，包括加减乘除和四舍五入。

 */
public class ComputeUtil {

    //默认除法运算精度
    private static final int DEF_DIV_SCALE = 2;

    //这个类不能实例化
    private ComputeUtil() {
    }

    public static String toShowString(Integer amount) {
        if (amount == null) {
            return "0";
        }
        return toShowString(Long.valueOf(amount));
    }

    //返回两位小数点数字
    public static String toShowStringWithDot00(Integer amount) {
        if (amount == null) {
            return "0.00";
        }
        String result = toShowString(Long.valueOf(amount));
        if(!result.contains(".")){
            return result + ".00";
        }else{
            int dotPos = result.indexOf(".");
            int bitNumAfterDot = result.length() - dotPos - 1;
            if(bitNumAfterDot <= 1){
                return result + '0';
            }else{
                return result;
            }
        }
    }
    public static String toShowString(Long amount) {
        if (amount == null) {
            return "0";
        }
        BigDecimal b1 = new BigDecimal(amount);
        BigDecimal b2 = new BigDecimal(100);
        String result = b1.divide(b2, DEF_DIV_SCALE, BigDecimal.ROUND_HALF_UP).toString();
        if (result.endsWith(".00")) {
            return result.substring(0, result.length() - 3);
        } else if (result.endsWith("0")) {
            return result.substring(0, result.length() - 1);
        } else {
            return result;
        }
    }

    public static Long toScaleLong(String amount) {
        BigDecimal b1 = new BigDecimal(amount);
        BigDecimal b2 = new BigDecimal(100);
        return b1.multiply(b2).longValue();
    }

    public static Integer toScaleInteger(String amount) {
        BigDecimal b1 = new BigDecimal(amount);
        BigDecimal b2 = new BigDecimal(100);
        return b1.multiply(b2).intValue();
    }

    /**
     * @param amount
     * @param digital 保留精度
     * @return
     */
    public static Long toScaleLong(Integer amount, int digital) {
        String amountShowStr = ComputeUtil.toShowString(amount);
        double tempPirce = ComputeUtil.round(Double.valueOf(amountShowStr), digital);
        return ComputeUtil.toScaleLong(String.valueOf(tempPirce));
    }

//    public static Double toScaleDouble(String amount) {
//        BigDecimal b1 = new BigDecimal(amount);
//        BigDecimal b2 = new BigDecimal(100);
//        return b1.multiply(b2).doubleValue();
//    }
//
//    public static Double toScaleDouble(Integer amount) {
//        BigDecimal b1 = new BigDecimal(amount);
//        BigDecimal b2 = new BigDecimal(100);
//        return b1.divide(b2).doubleValue();
//    }
//
    public static void main(String[] args) {


        System.out.println(toUpperInt(12.3d));
    }

    //向上取整
    public static int toUpperInt(float num) {
        return new Float(Math.ceil(num)).intValue();
    }

    //向上取整
    public static int toUpperInt(double num) {
        return new Double(Math.ceil(num)).intValue();
    }

    public static int sub(int v1, int v2) {
        BigDecimal b1 = new BigDecimal(Double.toString(v1));
        BigDecimal b2 = new BigDecimal(Double.toString(v2));
        return b1.subtract(b2).intValue();
    }

    public static int mul(int v1, int v2) {
        BigDecimal b1 = new BigDecimal(Double.toString(v1));
        BigDecimal b2 = new BigDecimal(Double.toString(v2));
        return b1.multiply(b2).intValue();
    }

    public static double round(double a, int n) {
        a = a * Math.pow(10, n);
        return (Math.round(a)) / (Math.pow(10, n));
    }

    //
//    /**
//     * 提供精确的加法运算。
//     *
//     * @param v1 被加数
//     * @param v2 加数
//     * @return 两个参数的和
//     */
//    public static double add(double v1, double v2) {
//        BigDecimal b1 = new BigDecimal(Double.toString(v1));
//        BigDecimal b2 = new BigDecimal(Double.toString(v2));
//        return b1.add(b2).doubleValue();
//    }
//
//    /**
//     * 提供精确的减法运算。
//     *
//     * @param v1 被减数
//     * @param v2 减数
//     * @return 两个参数的差
//     */
//    public static double sub(double v1, double v2) {
//        BigDecimal b1 = new BigDecimal(Double.toString(v1));
//        BigDecimal b2 = new BigDecimal(Double.toString(v2));
//        return b1.subtract(b2).doubleValue();
//    }
//
//    /**
//     * 提供精确的乘法运算。
//     *
//     * @param v1 被乘数
//     * @param v2 乘数
//     * @return 两个参数的积
//     */
//    public static double mul(double v1, double v2) {
//        BigDecimal b1 = new BigDecimal(Double.toString(v1));
//        BigDecimal b2 = new BigDecimal(Double.toString(v2));
//        return b1.multiply(b2).doubleValue();
//    }
//
//    /**
//     * 提供（相对）精确的除法运算，当发生除不尽的情况时，精确到
//     * 小数点以后10位，以后的数字四舍五入。
//     *
//     * @param v1 被除数
//     * @param v2 除数
//     * @return 两个参数的商
//     */
//    public static double div(double v1, double v2) {
//        return div(v1, v2, DEF_DIV_SCALE);
//    }
//
//    /**
//     * 提供（相对）精确的除法运算。当发生除不尽的情况时，由scale参数指
//     * 定精度，以后的数字四舍五入。
//     *
//     * @param v1    被除数
//     * @param v2    除数
//     * @param scale 表示表示需要精确到小数点以后几位。
//     * @return 两个参数的商
//     */
//    public static double div(double v1, double v2, int scale) {
//        if (scale < 0) {
//            throw new IllegalArgumentException(
//                    "The scale must be a positive integer or zero");
//        }
//        BigDecimal b1 = new BigDecimal(Double.toString(v1));
//        BigDecimal b2 = new BigDecimal(Double.toString(v2));
//        return b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP).doubleValue();
//    }
//
//    /**
//     * 提供精确的小数位四舍五入处理。
//     *
//     * @param v     需要四舍五入的数字
//     * @param scale 小数点后保留几位
//     * @return 四舍五入后的结果
//     */
//    public static double round(double v, int scale) {
//
//        if (scale < 0) {
//            throw new IllegalArgumentException(
//                    "The scale must be a positive integer or zero");
//        }
//        BigDecimal b = new BigDecimal(Double.toString(v));
//        BigDecimal one = new BigDecimal("1");
//        return b.divide(one, scale, BigDecimal.ROUND_HALF_UP).doubleValue();
//    }
//
}
